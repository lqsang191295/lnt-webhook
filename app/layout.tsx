"use client";

// import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import MainLayout from "./_components/main-layout";
import StoreProvider from "@/store/provider";
import GlobalVariablesProvider from "@/components/global-variables";
import { GloabalAlertDialogProvider } from "@/components/global-alert-dialog";
import { Toaster } from "sonner";
import GlobalLoading from "@/components/global-loading";
import { usePathname } from "next/navigation";
import { useZaloData } from "@/store/zalo-data-store";
import { memo, useCallback, useEffect, useState } from "react";
import { getZaloDsTemplate, getZaloToken } from "./(zalo)/token/_actions";
import { httpBatchLink } from "@trpc/client";
import { QueryClient } from "@tanstack/react-query";
import { trpc } from "@/trpc/client";
import { ThemeProvider } from "@ui5/webcomponents-react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const RootLayout = ({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) => {
  const pathname = usePathname();
  const pathnameNotUseLayout = [
    "/login",
    "/patient",
    "/doctor",
    "/waiting-screen",
    "/waiting-screen/room",
    "/access-device",
    "/wait-access-device",
    "/terms-of-service",
    "/privacy-policy",
    "/erm",
  ];

  const useNoLayout = pathnameNotUseLayout.some((path) =>
    pathname.startsWith(path)
  );

  const { setAccessToken, setDsTempalte, setRefreshToken } = useZaloData();
  const loadZaloDataAsync = useCallback(() => {
    getZaloToken().then((resZalo) => {
      if (!resZalo) return;

      const { access_token, refresh_token } = resZalo;

      setAccessToken(access_token);
      setRefreshToken(refresh_token);

      getZaloDsTemplate({ access_token, offset: 0, limit: 100 }).then(
        (data) => {
          setDsTempalte(data);
        }
      );
    });
  }, [setAccessToken, setDsTempalte, setRefreshToken]);

  const [queryClient] = useState(() => new QueryClient());
  const [trpcClient] = useState(() =>
    trpc.createClient({
      links: [httpBatchLink({ url: "/api/trpc" })],
    })
  );

  useEffect(() => {
    loadZaloDataAsync();
  }, [loadZaloDataAsync]);

  if (useNoLayout) {
    return (
      <html lang="en">
        <body>
          <ThemeProvider>
            <trpc.Provider client={trpcClient} queryClient={queryClient}>
              <GlobalVariablesProvider>{children}</GlobalVariablesProvider>
            </trpc.Provider>
          </ThemeProvider>
          <Toaster />
        </body>
      </html>
    );
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <StoreProvider>
          <GlobalVariablesProvider>
            <GloabalAlertDialogProvider>
              <MainLayout>{children}</MainLayout>
            </GloabalAlertDialogProvider>
          </GlobalVariablesProvider>
        </StoreProvider>

        <Toaster />
        <GlobalLoading />
      </body>
    </html>
  );
};

export default memo(RootLayout);
